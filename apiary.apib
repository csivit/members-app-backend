FORMAT: 1A

# api-csimembers


## Authentication

+ This API uses [JWT](http://jwt.io/) for authentication,
+ Token MUST be provided in `Authorization` header,
+ Toke MUST be provided for each request that requires authentication,

### Example Header
```
Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhNnZoQW8zRkc3dDEiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE0NzA1OTg5NzIsImV4cCI6MTQ3MDY4NTM3Mn0.ltA9zZmJKszBJuuV7pTWtY7LzLXrRUfebJDhy_jGMeM
```



## HTTP Methods

This API uses HTTP verbs (methods) as following:

+ `GET` - *Read* - used to **retrieve** information,
+ `POST` - *Create* - used to **create** new resources.
+ `PUT` - *Update/Replace* - used for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. On successful request, replaces identified resource with the request body.



## Representation of Date and Time

All exchange of date and time-related data are in `YYYY-MM-DDThh:mm:ss.SSSZ` format.


## Status Codes and Errors

This API uses HTTP status codes to communicate with the API consumer.

+ `200 OK` - Response to a successful GET, PUT, PATCH or DELETE.
+ `201 Created` - Response to a POST that results in a creation.
+ `204 No Content` - Response to a successful request that won't be returning a body (like a DELETE request).
+ `400 Bad Request` - Malformed request; form validation errors.
+ `401 Unauthorized` - When no or invalid authentication details are provided.
+ `403 Forbidden` - When authentication succeeded but authenticated user doesn't have access to the resource.
+ `404 Not Found` - When a non-existent resource is requested.
+ `405 Method Not Allowed` - Method not allowed.

### Error response

This API returns both, machine-readable error codes and human-readable error messages in response body when an error is encountered.

#### Example

##### Validation Error

```js
{
    "code" : "404",
    "detail": "Event not found",
    
}
```



# Group Authentication

## User login [/auth/login]

Access tokens are required to access nearly all endpoints of this API.

### Retrieve a token [POST]

Allows to retrieve a valid JSON Web Token for username and password.
Use registeration number as username

**Endpoint information**

|                         |     |
|-------------------------|-----|
| Requires authentication | No  |

+ Request (application/json)
    + Attributes
        + username: `dummy@vitstudent.ac.in` (string, required) - User email address
        + password: `QXR0mi38a2` (string, required) - User password

+ Response 200 (application/json)
    + Attributes
        + token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....` (string) - JSON Web Token.

## Refresh a token [POST /auth/refresh-token]

Allows to retrieve a new, valid JSON Web Token based on a valid JSON Web Token.
Expiry time is currently 15 days.
Expired tokens MUST NOT be refreshed.

**Endpoint information**

|                         |     |
|-------------------------|-----|
| Requires authentication | Yes |

+ Request
    + Headers

            Authorization: JWT <token>

+ Response 200 (application/json)
    + Attributes
        + token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....` (string) - New JWT

## User registration [/auth/register]

### Register a new user [POST]

Creates a new user account.

+ Provided email address MUST be unique.
+ Passwords MUST have at least six characters.
+ Passwords MUST NOT contain the user name or parts of the userâ€™s full name, such as his first name.


**Endpoint information**

|                         |     |
|-------------------------|-----|
| Requires authentication | No  |

+ Request (application/json)
    + Attributes
        + email: `john.doe@mail.com` (string, required) - E-mail address.
        + password: `QXR0mi38a2` (string, required) - User password.
        + username: `16BCE0000` (string,required) - Registeration Number
        + phone: `9090909090` (string,required) - Mobile Number
        + name: 'VIT VIT' (string,required) - Full Name
        + key: 'dsfdsfn3' (string,required) - In case of Paid member a key is required to register

+ Response 201

## User password [/users/password]

### Change a password of the current user [PUT]

Changes user password.

After password is changed all access tokens issued for this user prior to password change must be invalidated.

**Endpoint information**

|                         |     |
|-------------------------|-----|
| Requires authentication | Yes |


+ Request (application/json)
    + Headers

            Authorization: JWT <token>
    + Attributes
        + old_password: `secret` (string, required)
        + new_password: `$3C6e7` (string, required)

+ Response 200
    + Attributes
        + token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...` (string) - New JSON Web Token.

## Events [/events]

### List all events [GET]

Returns a list of events. The events are returned in sorter order, with the most recent events appearing first.

|                         |     |
|-------------------------|-----|
| Requires authentication | Yes |

+ Request
    + Headers

            +Authorization: JWT 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' (string,required)

+ Response 200 (application/json)
    + Attributes (array[Event,Event2])

## Event [/events/{id}]

+ Parameters
    + id: `a6vhAo3FG7t1` (string) - id of the user.

### Retrieve details about an event [GET]

Retrieves the details of an event.

|                         |     |
|-------------------------|-----|
| Requires authentication | Yes |


+ Request
    + Headers

            Authorization: JWT <token>

+ Response 200 (application/json)
    + Attributes (Eventcomplete)

+ Response 404

## User [/user]

### Get user details [GET]

Returns the profile of the logged in user.

|                         |     |
|-------------------------|-----|
| Requires authentication | Yes |

+ Request
    + Headers

            +Authorization: JWT 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' (string,required)

+ Response 200 (application/json)
    + Attributes (DummyUser)

# Data Structures
## DummyUser (object)
+ name: `VIT VIT` (string) - Full name of the user.
+ username: `16BCE000` (string) - Registeration number.
+ phone: `9090909090` (string) - Mobile Number
+ mem_type: `Paid` (string) -Paid/Unpaid/Credit
+ email: `1@a.com` (string) -Email

## Event (object)

+ id: `a6vhAo3FG7t1` (string, fixed) - Short non-sequential url-friendly unique id.
+ date: `2016-07-01T15:11:09.553Z` (string) - ISO Date/time string. When this resource was created.
+ name: `Codespace` (string) - Name of the event.
+ venue: `CS HALL` (string) - Venue.
+ cat: `Hackathon` (string) - Categories

## Event2 (object)

+ id: `a6vhAo3FG22` (string, fixed) - Short non-sequential url-friendly unique id.
+ date: `2017-08-02T15:11:09.553Z` (string) - ISO Date/time string. When this resource was created.
+ name: `Python Workshop` (string) - First name of the user.
+ venue: `SJT 319` (string) - Venue.
+ cat: `Workshop` (string) - Categories

## Eventcomplete (object)

+ id: `a6vhAo3FG7t1` (string, fixed) - Short non-sequential url-friendly unique id.
+ date: `2016-07-01T15:11:09.553Z` (string) - ISO Date/time string. When this resource was created.
+ name: `Codespace` (string) - First name of the user.
+ venue: `CS HALL` (string) - Venue.
+ images: `URL of images comma seperated` (string) - Image
+ desc: `ddsfdsnfjkdsnjkfnjdsnjfnjkdsnfjndsjnfjnsjd` (string) - Description